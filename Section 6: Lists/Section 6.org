#+TITLE: Section 6
#+SUBTITLE: Lists
#+AUTHOR: Mohammed Asir Shahid
#+EMAIL: MohammedShahid@protonmail.com
#+DATE: 2021-08-02

* The List Data type

A list is a data type that contains multiple ordered items. Lists begin and end with square brackets and are separated by commas. They can be assigned to variables just like any other value.



#+begin_src python :results output :exports both

["cat", "bat", "rat", "elephant"]

spam=["cat", "bat", "rat", "elephant"]

print(spam)

#+end_src

#+RESULTS:
: ['cat', 'bat', 'rat', 'elephant']

We can use indices to access items within the list. These indices also begin and end with square brackets.

#+begin_src python :results output :exports both

["cat", "bat", "rat", "elephant"]

spam=["cat", "bat", "rat", "elephant"]

print(spam)

print(spam[0])
print(spam[1])
print(spam[2])
print(spam[3])

#+end_src

#+RESULTS:
: ['cat', 'bat', 'rat', 'elephant']
: cat
: bat
: rat
: elephant

The items inside of a list can be of any data type, including other lists. In those cases, we can use 2 indices in order to find the items in the list inside of the list. We can also use negative values for the index in order to start counting from the end.

#+begin_src python :results output :exports both

spammed=["cat", "bat", "rat", "elephant"]

spam=[["cat", "bat"], [10,20,30,40,50]]

print(spam)

print(spam[0][0])
print(spam[1][0])
print(spam[1][4])
print(spammed[-1])
print(spammed[-2])

#+end_src

#+RESULTS:
: [['cat', 'bat'], [10, 20, 30, 40, 50]]
: cat
: 10
: 50
: elephant
: rat

We also have slices which can give us several values from inside of a list. This works similar to the range function. A slice of 1 3 starts at index 1 and goes up to, but does not include the value at 3.

#+begin_src python :results output :exports both

spammed=["cat", "bat", "rat", "elephant"]

spam=[["cat", "bat"], [10,20,30,40,50]]

print(spam)

print(spam[0][0])
print(spam[1][0])
print(spam[1][4])
print(spammed[0:2])

#+end_src

#+RESULTS:
: [['cat', 'bat'], [10, 20, 30, 40, 50]]
: cat
: 10
: 50
: ['cat', 'bat']


We can also change the values of a list.


#+begin_src python :results output :exports both

spammed=["cat", "bat", "rat", "elephant"]

spam=[["cat", "bat"], [10,20,30,40,50]]

print(spammed)

spammed[0]="Hello"

print(spammed)

spammed[1:3]=["Good", "Bye"]

print(spammed)

#+end_src

#+RESULTS:
: ['cat', 'bat', 'rat', 'elephant']
: ['Hello', 'bat', 'rat', 'elephant']
: ['Hello', 'Good', 'Bye', 'elephant']

We have some shortcuts when it comes to lists. Leaving out the first index is the same as 0, or the beginning of the list. Leaving out the second index is the same as using the length of the list which will slice to the end of the list.


#+begin_src python :results output :exports both

spammed=["cat", "bat", "rat", "elephant"]

spam=[["cat", "bat"], [10,20,30,40,50]]

print(spammed[:2])
print(spammed[2:])

#+end_src

#+RESULTS:
: ['cat', 'bat']
: ['rat', 'elephant']

Del statements can delete values from the list.

#+begin_src python :results output :exports both

spammed=["cat", "bat", "rat", "elephant"]

spam=[["cat", "bat"], [10,20,30,40,50]]

print(spammed)
del spammed[2]

print(spammed)

#+end_src

#+RESULTS:
: ['cat', 'bat', 'rat', 'elephant']
: ['cat', 'bat', 'elephant']

We can get the number of items in a list using the len function. We can also do list concatenation similar to string concatenation. We can also do list replication.

#+begin_src python :results output :exports both

spammed=["cat", "bat", "rat", "elephant"]

spam=[["cat", "bat"], [10,20,30,40,50]]

print(len(spammed))

print(spammed*3)

print(spammed+spam)

#+end_src

#+RESULTS:
: 4
: ['cat', 'bat', 'rat', 'elephant', 'cat', 'bat', 'rat', 'elephant', 'cat', 'bat', 'rat', 'elephant']
: ['cat', 'bat', 'rat', 'elephant', ['cat', 'bat'], [10, 20, 30, 40, 50]]

There is also a list function that converts our values into a list, similar to the int or str functions.

#+begin_src python :results output :exports both

spammed=["cat", "bat", "rat", "elephant"]

spam=[["cat", "bat"], [10,20,30,40,50]]

print(list("Hello"))

#+end_src

#+RESULTS:
: ['H', 'e', 'l', 'l', 'o']

We can use the in or not in operators with lists.


#+begin_src python :results output :exports both

spammed=["cat", "bat", "rat", "elephant"]

spam=[["cat", "bat"], [10,20,30,40,50]]

print("cat" in spammed)
print("dog" in spammed)
print("dog" not in spammed)

#+end_src

#+RESULTS:
: True
: False
: True
