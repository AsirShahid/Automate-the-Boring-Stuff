#+TITLE: Section 10
#+SUBTITLE: Regular Expressions
#+AUTHOR: Mohammed Asir Shahid
#+EMAIL: MohammedShahid@protonmail.com
#+DATE: 2021-08-03

* Regular Expression Basics

In this lesson, we will be working with pattern matching and regular expressions. Regular expressions allow you to specify a pattern of text to search for.

An example of a text pattern would be a phone number. 415-555-0000. In the US, this is the standard way of writing up phone numbers. If we had that same number but without the hyphens, we would not recognize it as a phone number.

#+begin_src python :results output :exports both
def isPhoneNumber(text):
    if len(text) != 12:
        return False
    for i in range(0, 3):
        if not text[i].isdecimal():
            return False
    if text[3] != '-':
        return False
    for i in range(4, 7):
        if not text[i].isdecimal():
            return False
    if text[7] != '-':
        return False
    for i in range(8, 12):
        if not text[i].isdecimal():
            return False
    return True

print(isPhoneNumber("415-555-1234"))
print(isPhoneNumber("My Phone Number"))

#+end_src

#+RESULTS:
: True
: False

That's a lot of code for a relatively simple task. If we want to find phone numbers in large strings, we'd need to write some more code.

#+begin_src python :results output :exports both
def isPhoneNumber(text):
    if len(text) != 12:
        return False
    for i in range(0, 3):
        if not text[i].isdecimal():
            return False
    if text[3] != '-':
        return False
    for i in range(4, 7):
        if not text[i].isdecimal():
            return False
    if text[7] != '-':
        return False
    for i in range(8, 12):
        if not text[i].isdecimal():
            return False
    return True

print(isPhoneNumber("415-555-1234"))
print(isPhoneNumber("My Phone Number"))

message="Call me at 415-555-1011 tomorrow, or 415-555-9999 for my office line"

foundNuumber=False

for i in range(len(message)):
    chunk=message[i:i+12]
    if isPhoneNumber(chunk) == True:
        print("Phone number found")
        foundNumber=True
if not foundNumber:
    print("Could not find any phone numbers")

#+end_src

#+RESULTS:
: True
: False
: Phone number found
: Phone number found

** The re Module

We can write the previous code much faster using regular expressions.

#+begin_src python :results output :exports both

import re

message="Call me at 415-555-1011 tomorrow, or 415-555-9999 for my office line"

phoneNumRegex=re.compile(r"\d\d\d-\d\d\d-\d\d\d\d")

mo=phoneNumRegex.search(message)

print(type(mo))
print(mo.group())

print(phoneNumRegex.findall(message))


#+end_src

#+RESULTS:
: <class 're.Match'>
: 415-555-1011
: ['415-555-1011', '415-555-9999']

* Regex Groups and the Pipe Character

We can try some more of Python's more powerful pattern matching capabilities.

Let's say we want to seperate the area code from a phone number.


#+begin_src python :results output :exports both

import re

phoneNumRegex = re.compile(r"\d\d\d-\d\d\d-\d\d\d\d")
mo=phoneNumRegex.search("My number is 415-555-4242")
print(mo.group())


#+end_src

#+RESULTS:
: 415-555-4242

** Groups

Let's say we only want the phone number or only the phone number portion of the number. We can do this sing parentheses to mark out groups in the string.

#+begin_src python :results output :exports both

import re

phoneNumRegex = re.compile(r"(\d\d\d)-(\d\d\d-\d\d\d\d)")
mo=phoneNumRegex.search("My number is 415-555-4242")
print(mo.group())

print(mo.group(1))
print(mo.group(2))

#+end_src

#+RESULTS:
: 415-555-4242
: 415
: 555-4242

The parentheses there can be useful syntax when we want to find specific parts of something. However, what can we do when we want to find literal parentheses? We would escape them using parentheses.

#+begin_src python :results output :exports both

import re

phoneNumRegex = re.compile(r"\(\d\d\d\) \d\d\d-\d\d\d\d")
mo=phoneNumRegex.search("My number is (415) 555-4242")
print(mo.group())

#+end_src

#+RESULTS:
: (415) 555-4242

** Pipe Character |

Pipes can be used to match one of several patterns as part of the regular expression.

Let's say we wanted to match any of the strings "Batman", "Batmobile", "Batcopter", or "Batbat"


#+begin_src python :results output :exports both

import re

batRegex = re.compile(r"Bat(man|mobile|copter|bat)")
mo=batRegex.search("Batmobile lost a wheel.")
print(mo.group())
print(mo.group(1))

#+end_src

#+RESULTS:
: Batmobile
: mobile

If the search method can't find the regular expression pattern, it will return None. In that case, we can risk running into errors.

* Repetition in Regex Patterns and Greedy/Nongreedy Matching

How can we match a certain number of repetitions of a group? For example, one or more repitions, between 7 and 10 repitions, etc.

** ? (zero or one)
:LOGBOOK:
CLOCK: [2021-08-03 Tue 21:32]
:END:

This says match the preceding group either 0 or 1 times.

#+begin_src python :results output :exports both

import re

#batRegex=re.compile(r"Batman|Batwoman")
batRegex=re.compile(r"Bat(wo)?man")

mo=batRegex.search("The Adventures of Batman")
print(mo.group())

mo=batRegex.search("The Adventures of Batwoman")
print(mo.group())

mo=batRegex.search("The Adventures of Batwowoman")
print(mo)

#+end_src

#+RESULTS:
: Batman
: Batwoman
: None

Using our earlier phone number example, we can make a regular expression that looks for phone numbers that do or do not have an area code. With our previous code, if we did not have an area code then the regex would not find the phone number.


#+begin_src python :results output :exports both

import re

phoneRegex=re.compile(r"\d\d\d-\d\d\d-\d\d\d\d")

mo = phoneRegex.search("My phone number is 415-555-1234")
print(mo.group())

mo = phoneRegex.search("My phone number is 555-1234")
print(mo)

phoneRegex=re.compile(r"(\d\d\d-)?\d\d\d-\d\d\d\d")

mo = phoneRegex.search("My phone number is 415-555-1234")
print(mo.group())

mo = phoneRegex.search("My phone number is 555-1234")
print(mo.group())

#+end_src

#+RESULTS:
: 415-555-1234
: None
: 415-555-1234
: 555-1234

If we need to match a question mark as part of the expression, we can simply escape it by doing \?.

** * (zero or more)

The asterisk means match 0 or more times.


#+begin_src python :results output :exports both

import re
batRegex=re.compile(r"Bat(wo)*man")

mo=batRegex.search("The Adventures of Batman")
print(mo.group())

mo=batRegex.search("The Adventures of Batwoman")
print(mo.group())

mo=batRegex.search("The Adventures of Batwowowoman")
print(mo.group())

#+end_src

#+RESULTS:
: Batman
: Batwoman
: Batwowowoman

If you need to match an * that appears in the pattern, you can escape it by doing \*.

** + (one or more)

Unlike the star, the group preceding a + must appear in the pattern.

#+begin_src python :results output :exports both

import re
batRegex=re.compile(r"Bat(wo)+man")

mo=batRegex.search("The Adventures of Batman")
print(mo)

mo=batRegex.search("The Adventures of Batwoman")
print(mo.group())

mo=batRegex.search("The Adventures of Batwowowoman")
print(mo.group())

#+end_src

#+RESULTS:
: None
: Batwoman
: Batwowowoman

If you need to match a + that appears in the pattern, you can escape it by doing \+.

** Escaping ?, *, and +


#+begin_src python :results output :exports both

import re
regex = re.compile(r"\+\*\?")

mo=regex.search("I learned about +*? regex syntax")
print(mo.group())

#+end_src

#+RESULTS:
: +*?

We could also put the above +*? into a group and then putting a + after it to say that the group needs to appear at least once.

#+begin_src python :results output :exports both

import re
regex = re.compile(r"(\+\*\?)+")

mo=regex.search("I learned about +*?+*?+*? regex syntax")
print(mo.group())

#+end_src

#+RESULTS:
: +*?+*?+*?

** {x} (exactly x)

This can be used if you wanted to match a specific number of repetitions of a group.


#+begin_src python :results output :exports both

import re

haRegex=re.compile(r"(Ha){3}")
mo=haRegex.search("He said \"HaHaHa\"")
print(mo.group())

#+end_src

#+RESULTS:
: HaHaHa

While the above is a simple example, we could do it for many other, more complex examples.

#+begin_src python :results output :exports both

import re

phoneRegex=re.compile(r"((\d\d\d-)?\d\d\d-\d\d\d\d(,)?){3}")
mo=phoneRegex.search("My numbers are 415-555-1234,555-4242,212-555-0000")
print(mo.group())

#+end_src

#+RESULTS:
: 415-555-1234,555-4242,212-555-0000

** {x,y} (at least x, at most y)


#+begin_src python :results output :exports both

import re
haRegex=re.compile(r"(Ha){3,5}")
mo=haRegex.search("He said \"HaHaHa\"")
print(mo.group())

mo=haRegex.search("He said \"HaHaHaHaHa\"")
print(mo.group())

mo=haRegex.search("He said \"HaHaHaHaHaHa\"")
print(mo)

#+end_src

#+RESULTS:
: HaHaHa
: HaHaHaHaHa
: <re.Match object; span=(9, 19), match='HaHaHaHaHa'>

We can also have no y value which would have no maximum and be unbounded, x or more.

#+begin_src python :results output :exports both

import re

digitRegex=re.compile(r"(\d){3,5}")
mo=digitRegex.search("1234567890")
print(mo.group())

#+end_src

#+RESULTS:
: 12345

As we can see above, there was a match of the first 5 digits even though the first 3 also would have sufficed. By default, Python regular expressions do greedy matches. This means that it tries to match the longest possible string that matches the pattern.

In order to do a nongreedy match, we can specify a question mark following the curly braces. Then it matches the first, shortest pattern.

#+begin_src python :results output :exports both

import re

digitRegex=re.compile(r"(\d){3,5}?")
mo=digitRegex.search("1234567890")
print(mo.group())

#+end_src

#+RESULTS:
: 123

* Regex Character Classes and the findall() Method

In this lesson, we'll talk about the findall() method with regular expressions.

#+begin_src python :results output :exports both

import re

resume="""
JESSE KENDALL
123 Elm Street, Fall River, MA 02723, Cell: 508-555-5555, Home: 508-555-1234 twemel@charter.net



SUMMARY OF QUALIFICATIONS
Dedicated cell phone sales professional with demonstrated success in retail management, product presentation, and customer service. Proven ability to assess client needs; establish rapport, build trust, and close deals. Meet and exceed sales objectives and challenging goals. Proficient in Microsoft Office (Word, Excel, PowerPoint, Access), and H/O billing systems.

SALES SUCCESS
RETAIL STORE SALES MANAGER, 20xx – 20xx
ABC CELLULAR, Fall River, MA
Recruited, hired, trained, developed, and directed retail sales teams for two retail ABC Wireless dealer stores. Oversaw client relations, new account development, and customer service. Supervised administrative functions, inventory, cash flow, merchandising, and operations. Conducted ongoing staff development and personal growth planning for employees.

Implemented a sales-tracking spreadsheet to replace a manual form writing process to increase efficiency.
Developed innovative and effective marketing programs; exceeded store sales quotas.
Successfully managed one of the highest-producing ABC Wireless dealer locations in the San Diego market.
Received several “Sales Manager of the Month” Awards.
Created a team spirit within the stores that resulted in increased sales, long-term employees, and customer satisfaction.
CELL PHONE SALES REPRESENTATIVE, 20xx – 20xx
BCD CELL PHONE HUT, Fall River, MA
Partnered with a high-performing sales staff to provided quality customer service. Served as a customer advocate; interfaced with the clients’ designated program administrators to provide product and service solutions and meet individual customer needs. Assisted customers with billing and expense management, post sale customer education on wireless service and equipment, issue resolution, and technical troubleshooting.

Effectively delivered post-sale care services, exceeding clients’ expectations in a cost-effective manner.
Obtained significant business by delivering presale presentations to demonstrate new phone features.
CUSTOMER SERVICE REPRESENTATIVE, 20xx – 20xx
CDE CELLULAR SERVICES, Fall River, MA
Responded to billing inquiries, assisted in technical troubleshooting, and performed rate plan analysis. Provided friendly and professional customer service while answering over 90 inbound calls per day.

Chosen to facilitate training in an outsourced call center.
EDUCATION
Bachelor of Arts in Communication (Major: Advertising), 20xx
XYZ UNIVERSITY, Milwaukee, WI

REFERENCES
Excellent references provided upon request.
"""


phoneRegex=re.compile(r"\d{3}-\d{3}-\d{4}")
mo=phoneRegex.findall(resume)
print(mo)

#+end_src

#+RESULTS:
: ['508-555-5555', '508-555-1234']

We used findall() above so we can easily find all of the matches. If we used search() like we did earlier, it would only return the first match.

There is an important distinction between search() and findall(). The search() method returns Match Objects while the findall() method returns a list of strings.

If the regular expression string has 0 or 1 groups, then the findall() method will jstu return a list of strings which each string in the list is the text that was found.


However, with regex objects that have 2 or more groups, the following occurs.

#+begin_src python :results output :exports both

import re

resume="""
JESSE KENDALL
123 Elm Street, Fall River, MA 02723, Cell: 508-555-5555, Home: 508-555-1234 twemel@charter.net



SUMMARY OF QUALIFICATIONS
Dedicated cell phone sales professional with demonstrated success in retail management, product presentation, and customer service. Proven ability to assess client needs; establish rapport, build trust, and close deals. Meet and exceed sales objectives and challenging goals. Proficient in Microsoft Office (Word, Excel, PowerPoint, Access), and H/O billing systems.

SALES SUCCESS
RETAIL STORE SALES MANAGER, 20xx – 20xx
ABC CELLULAR, Fall River, MA
Recruited, hired, trained, developed, and directed retail sales teams for two retail ABC Wireless dealer stores. Oversaw client relations, new account development, and customer service. Supervised administrative functions, inventory, cash flow, merchandising, and operations. Conducted ongoing staff development and personal growth planning for employees.

Implemented a sales-tracking spreadsheet to replace a manual form writing process to increase efficiency.
Developed innovative and effective marketing programs; exceeded store sales quotas.
Successfully managed one of the highest-producing ABC Wireless dealer locations in the San Diego market.
Received several “Sales Manager of the Month” Awards.
Created a team spirit within the stores that resulted in increased sales, long-term employees, and customer satisfaction.
CELL PHONE SALES REPRESENTATIVE, 20xx – 20xx
BCD CELL PHONE HUT, Fall River, MA
Partnered with a high-performing sales staff to provided quality customer service. Served as a customer advocate; interfaced with the clients’ designated program administrators to provide product and service solutions and meet individual customer needs. Assisted customers with billing and expense management, post sale customer education on wireless service and equipment, issue resolution, and technical troubleshooting.

Effectively delivered post-sale care services, exceeding clients’ expectations in a cost-effective manner.
Obtained significant business by delivering presale presentations to demonstrate new phone features.
CUSTOMER SERVICE REPRESENTATIVE, 20xx – 20xx
CDE CELLULAR SERVICES, Fall River, MA
Responded to billing inquiries, assisted in technical troubleshooting, and performed rate plan analysis. Provided friendly and professional customer service while answering over 90 inbound calls per day.

Chosen to facilitate training in an outsourced call center.
EDUCATION
Bachelor of Arts in Communication (Major: Advertising), 20xx
XYZ UNIVERSITY, Milwaukee, WI

REFERENCES
Excellent references provided upon request.
"""


phoneRegex=re.compile(r"(\d{3})-(\d{3}-\d{4})")
mo=phoneRegex.findall(resume)
print(mo)

#+end_src

#+RESULTS:
: [('508', '555-5555'), ('508', '555-1234')]

Now, instead of returning a list of strings, a list of tuples containing strings is returned. Each string in the tuple is the contents of each group.

** Character Classes

We've already looked at one character class (\d). It represents any numeric digit between 0 and 9. Character classes are shortcuts that make our code easier to read and write.

| Shorthand character class | Represents                                                                                             |
|---------------------------+--------------------------------------------------------------------------------------------------------|
| \d                        | Any numeric digit from 0 to 9.                                                                         |
| \D                        | Any character that is not a numeric digit from 0 to 9.                                                 |
| \w                        | Any letter, numeric digit, or the underscore character. (Think of this as matching “word” characters.) |
| \W                        | Any character that is not a letter, numeric digit, or the underscore character.                        |
| \s                        | Any space, tab, or newline character. (Think of this as matching “space” characters.)                  |
| \S                        | Any character that is not a space, tab, or newline.                                                    |

** 12 Days of Christmas Example

We can use regular expressions to find patterns where we have some number followed by some words.

#+begin_src python :results output :exports both

import re

lyrics= "12 drummers drumming, 11 pipers piping, 10 lords a leaping, 9 ladies dancing,  maids a milking, 7 swans a swimming, 6 geese a laying, 5 golden rings, 4 calling birds, 3 french hens, 2 turtle doves, and 1 partridge in a pear tree."

xmasRegex=re.compile(r"\d+\s\w+")

print(xmasRegex.findall(lyrics))

#+end_src

#+RESULTS:
: ['12 drummers', '11 pipers', '10 lords', '9 ladies', '7 swans', '6 geese', '5 golden', '4 calling', '3 french', '2 turtle', '1 partridge']

** Making Your Own Character Classes

Above we showed the existing shorthand character classes, but we can create our own character classes as well. Let's say we want to create a shorthand for vowels, then we can use r"[aeiouAEIOU]" for our Regex. If we want to make a negative character class, we can put in a ^ at the start of the square brackets.

#+begin_src python :results output :exports both

import re
vowelRegex=re.compile(r"[aeiouAEIOU]")

print(vowelRegex.findall("Robocop eats baby food."))

doublevowelRegex=re.compile(r"[aeiouAEIOU]{2}")

print(doublevowelRegex.findall("Robocop eats baby food."))

consonantsRegex=re.compile(r"[^aeiouAEIOU]")

print(consonantsRegex.findall("Robocop eats baby food."))
#+end_src

#+RESULTS:
: ['o', 'o', 'o', 'e', 'a', 'a', 'o', 'o']
: ['ea', 'oo']
: ['R', 'b', 'c', 'p', ' ', 't', 's', ' ', 'b', 'b', 'y', ' ', 'f', 'd', '.']

* Regex Dot-Star and the Caret/Dollar Characters

In our last lesson, we learned that we can use a ^ at the start of the square brackets in order to create a negative character class. We can also use a carrot at the start of a regular expression to indicate that the match needs to occur at the beginning of the text. We can also put a dollar sign at the end of the regular expression to indicate that the string has to match at the end with the regex pattern.

#+begin_src python :results output :exports both

import re

beginsWithHelloRegex=re.compile(r"^Hello")

mo=beginsWithHelloRegex.search("Hello there")
print(mo.group())

mo=beginsWithHelloRegex.search("He said Hello!")
print(mo)

endsWithWorldRegex=re.compile(r"world!$")

mo=endsWithWorldRegex.search("Hello world!")
print(mo.group())

mo=endsWithWorldRegex.search("Hello world!!!")
print(mo)

#+end_src

#+RESULTS:
: Hello
: None
: world!
: None

If we use both ^ at the beginning and $ at the end of our regex then that must indicate that the pattern must match the entire string.

#+begin_src python :results output :exports both

import re

allDigitsRegex= re.compile(r"^\d+$")

mo=allDigitsRegex.search("251681684168465161816")
print(mo.group())

mo=allDigitsRegex.search("25168168x4168465161816")
print(mo)

#+end_src

#+RESULTS:
: 251681684168465161816
: None

** . (anything except newline)

Having a period in your regex stands for any character except for newline.

#+begin_src python :results output :exports both

import re

atRegex=re.compile(r".at")
mo=atRegex.findall("The cat in the hat sat on the flat mat")
print(mo)

#+end_src

#+RESULTS:
: ['cat', 'hat', 'sat', 'lat', 'mat']


We can see above that the regex did not match "flat" since the . character is only looking for a single character before the "at". That's why we instaed have "lat" get matched.

#+begin_src python :results output :exports both

import re

atRegex=re.compile(r".{1,2}at")
mo=atRegex.findall("The cat in the hat sat on the flat mat")
print(mo)

#+end_src

#+RESULTS:
: [' cat', ' hat', ' sat', 'flat', ' mat']

** Dot-Star to Match Anything

A common thing that is done is a .* pattern to match anything, any pattern whatsoever.

#+begin_src python :results output :exports both

import re


nameRegex=re.compile(r"First Name: (.*) Last Name: (.*)")

mo=nameRegex.findall("First Name: Al Last Name: Sweigart")

print(mo)

#+end_src

#+RESULTS:
: [('Al', 'Sweigart')]

** (.*) is greedy, (.*?) is non-greedy

By default, dot-star uses greedy mode. We need to add the ? in order to make it not greedy.

#+begin_src python :results output :exports both

import re

serve = "<To serve humans> for dinner.>"

nongreedy=re.compile(r"<(.*?)>")

print(nongreedy.findall(serve))

greedy=re.compile(r"<(.*)>")

print(greedy.findall(serve))

#+end_src

#+RESULTS:
: ['To serve humans']
: ['To serve humans> for dinner.']

** Making Dot Match Newlines Too (with re.DOTALL)

Earlier, we mentioned that the dot character matches everything except for the newline character. How can we change that?

#+begin_src python :results output :exports both

import re

prime="Serve the public trust. \nProtect the innocent. \nUphold the law."
print(prime)

dotStar=re.compile(r".*")

print(dotStar.search(prime))

dotStar=re.compile(r".*", re.DOTALL)

print(dotStar.search(prime))

#+end_src

#+RESULTS:
: Serve the public trust.
: Protect the innocent.
: Uphold the law.
: <re.Match object; span=(0, 24), match='Serve the public trust. '>
: <re.Match object; span=(0, 63), match='Serve the public trust. \nProtect the innocent. \>

** re.IGNORECASE

Have second arguments to the compile function can be pretty useful. We can also have it do a case insensitive regex match.

#+begin_src python :results output :exports both

import re

vowelRegex=re.compile(r"[aeiou]")
print(vowelRegex.findall("Al, why does your programming book talk about RoboCop so much?"))

vowelRegex=re.compile(r"[aeiou]", re.I)
print(vowelRegex.findall("Al, why does your programming book talk about RoboCop so much?"))


#+end_src

#+RESULTS:
: ['o', 'e', 'o', 'u', 'o', 'a', 'i', 'o', 'o', 'a', 'a', 'o', 'u', 'o', 'o', 'o', 'o', 'u']
: ['A', 'o', 'e', 'o', 'u', 'o', 'a', 'i', 'o', 'o', 'a', 'a', 'o', 'u', 'o', 'o', 'o', 'o', 'u']

* Regex sub() Method and Verbose Mode

 Previously we called the re.compile function to create regular expression objects. These objects had search and findall methods. There are like the search features in word processors.

** The sub() method

The sub() method is like the replace feature in word processors. Let's see how to use it.

#+begin_src python :results output :exports both

import re

namesRegex=re.compile(r"Agent \w+")
mo=namesRegex.findall("Agent Alice gave the secret documents to Agent Bob.")
print(mo)

mo=namesRegex.sub("REDACTED","Agent Alice gave the secret documents to Agent Bob.")
print(mo)

#+end_src

#+RESULTS:
: ['Agent Alice', 'Agent Bob']
: REDACTED gave the secret documents to REDACTED.

What if instead of doing REDACTED, we want to change the name to Agent plus first initial?

We have to use a group and then call the group from the original text using \1.

#+begin_src python :results output :exports both

import re

namesRegex=re.compile(r"Agent (\w)\w*")
mo=namesRegex.findall("Agent Alice gave the secret documents to Agent Bob.")
print(mo)

mo=namesRegex.sub(r"Agent \1******","Agent Alice gave the secret documents to Agent Bob.")
print(mo)

#+end_src

#+RESULTS:
: ['A', 'B']
: Agent A****** gave the secret documents to Agent B******.

** Verbose Mode with re.VERBOSE

Regex strings can look awkward and difficult to parse, particularly when they get too long. We can use the verbose format in order to fix this.

#+begin_src python :results output :exports both

import re

re.compile(r"""
(\d\d\d)|   # area code without parentheses, with dash
(\(\d\d\d\)) or area code with parentheses
-        # first dash
\d\d\d   # first 3 digits
-        # second dash
\d\d\d\d # last 4 digits
\sx\d{2,4} # extension like x1234""", re.VERBOSE)

#+end_src

#+RESULTS:

** Using Multiple Options (re.I, re.DOTALL, re.VERBOSE)

We have learned about 3 different options for our re.compile function. What if we want to use several of these for the same regex? We can combine them using pipe symbols.

#+begin_src python :results output :exports both

import re

re.compile(r"""
(\d\d\d)|   # area code without parentheses, with dash
(\(\d\d\d\)) or area code with parentheses
-        # first dash
\d\d\d   # first 3 digits
-        # second dash
\d\d\d\d # last 4 digits
\sx\d{2,4} # extension like x1234""", re.VERBOSE | re.DOTALL | re.I)

#+end_src

#+RESULTS:
