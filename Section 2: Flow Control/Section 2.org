#+TITLE: Section 2
#+TITLE: Flow Control
#+AUTHOR: Mohammed Asir Shahid
#+EMAIL: MohammedShahid@protonmail.com
#+DATE: 2021-07-24


* Flow Charts and Basic Flow Control concepts

A flowchart is a series of instructions saying what to do in certain situations, generally revolving around boolean values.

** Comparison Operators
 ==
!=
 <
 >
 <=
 >=

 We can use these for comparisons.

#+begin_src python :results output :exports both
print(42==42)
print(42=="Hello")
print(42==41)
print(2!=3)
print(42<100)
print(42>=100)
print(42<=42)
myAge=22
print("My age is {}".format(myAge))
print(myAge==22)
 #+end_src

 #+RESULTS:
 : True
 : False
 : False
 : True
 : True
 : False
 : True
 : My age is 22
 : True

*** Boolean Operators
and
or
not

The and operator only evaluates to true if all are true.

The or operator only evaluates to true if at least one is true.

The not operator evaluates to the opposite boolean value.

#+begin_src python :results output :exports both

myAge=26
myPet="cat"
print(myAge>20 and myPet=="cat")

#+end_src

#+RESULTS:
: True

* If, Else, and Elif Statements

The most important portion flow control statements are the statements themselves.

#+begin_src python :results output :exports both

name = "Alice"

if name == "Alice":
    print("Hi Alice")
print("Done")
#+end_src

#+RESULTS:
: Hi Alice
: Done

Let's break this down. We have the if statement "if name="Alice"". Here, it evaluates the name variable and checks if it is true that it is equivalent to "Alice". Since it is equivalent, the program moves to the print statement.

We can look at indentation to see the differences in code blocks. Lines of code are grouped together in blocks which are dictated by indentations. We have 3 rules for code blocks: Blocks begin when the indentation increases. Blocks can contain other blocks. Blocks end when the indentation decreases to zero or to a containing blockâ€™s indentation.

#+begin_src python :results output :exports both

password="swordfish"

if password=="swordfish":
    print("Access granted")
else:
    print("Wrong password")

#+end_src

#+RESULTS:
: Access granted

Above we only print out "Access Granted" since our password variable is equivalent to "swordfish". If that was not the case, the first code block would be ignored and instead "Wrong password" would be printed out.


#+begin_src python :results output :exports both
name="Bob"
age=3000
if name == "Alice":
    print("Hi Alice")
elif age<12:
    print("You are not Alice, kiddo.")
elif age>2000:
    print("Unlike you, Alice is not an undead, immortal vampire.")
elif age>100:
    print("You are not Alice, Granny")

#+end_src

#+RESULTS:
: Unlike you, Alice is not an undead, immortal vampire.

First the name and age variables are saved. Then the first if statement is found to be false, so it is skipped. Then the first elif block is found to be false, so it is also skipped. Then the second elif statement is found to be true, so it enters the block and prints out our statement. Then the rest of the conditions are skipped.

We can also have an else statement which will be executed if all of the above code blocks are found to be false.


#+begin_src python :results output :exports both :var name=(read-string "What is your name? ")

print("Enter a name.")
#name=input()
if name:
    print("Thank you for entering a name.")
else:
    print("You did not enter a name.")
#+end_src

#+RESULTS:
: Enter a name.
: You did not enter a name.

Why does the statement "if name" evaluate when we do not input a name? This is due to the fact that the if condition can use "truthy" or "falsey" values for strings. For example, a blank string, as seen above, would be considered falsely and would return false in the if statement. However, inputting a name would result in the if statement evaluating as true. For integers the integer 0 is the falsey value and everything else is truthy. For floats, 0.0 is the falsey value while everything else is truthy. However, it is better to be explicit and say something such as "if name != """ instead.


#+begin_src python :results output :exports both

print(bool(""))
print(bool(0))
print(bool(0.0))
print(bool("Alice"))
print(bool(1))
print(bool(1.0))

#+end_src

#+RESULTS:
: False
: False
: False
: True
: True
: True

* While Loops

While loops can let you execute code blocks over and over again given that the while loops conditions are true.


#+begin_src python :results output :exports both

spam=0
while spam<5:
    print("Hello World!")
    spam+=1

#+end_src

#+RESULTS:
: Hello World!
: Hello World!
: Hello World!
: Hello World!
: Hello World!

The above while loop iterates 5 times, until the value of spam is atleast 5.

#+begin_src python :results output :exports both

spam=0
while spam<5:
    print("Hello World!")
    spam+=1
    print(spam)

#+end_src

#+RESULTS:
#+begin_example
Hello World!
1
Hello World!
2
Hello World!
3
Hello World!
4
Hello World!
5
#+end_example


#+begin_src python :results output :exports both

spam=0
if spam<5:
    print("Hello World!")
    spam+=1
    print(spam)

#+end_src

#+RESULTS:
: Hello World!
: 1

While statements look similar to if statements, however the difference is that at the end of a if block, the program execution continues on with the rest of the program. However, with a while block at the end, it loops back to the beginning to check and see if the initial condition is still true. If so, it executes the code block again, and if it is false then it continues on with the rest of the program.


#+begin_src python :results output :exports both

name = ""
while name!="your name":
    print("Please type your name.")
    name=input()
print("Thank you")

#+end_src

#+RESULTS:

This would keep looping until you type out "your name".

#+begin_src python :results output :exports both

spam=0

while spam<5:
    spam+=1
    if spam == 3:
        continue
    print("Spam is "  + str(spam))

#+end_src

#+RESULTS:
: Spam is 1
: Spam is 2
: Spam is 4
: Spam is 5


Above we can see that when spam is 3, the string is not printed. When spam is 3, the program goes into the if block and continues.
