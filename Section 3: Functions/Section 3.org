#+TITLE: Section 3
#+SUBTITLE: Functions
#+AUTHOR: Mohammed Asir Shahid
#+EMAIL: MohammedShahid@protonmail.com
#+DATE: 2021-07-30

* Pythons Built-In Functions

Python comes with many built in functions such as print, input, and len which we have already used. Python also comes with Modules known as the Standard Library. For example, we have the Math module containing mathematics functions, the random module containing random number functions, etc. In order to use functions from these modules, we need to import them as follows:

#+begin_src python :results output :exports both

import random

print(random.randint(1,10))

#+end_src

#+RESULTS:
: 10

The above randint function gives us a random number between the given integers. We need to preface the randint function by "random" since it is inside of the random module. It is not a built-in function, so Python will not find it without first calling the random module. Python's standard library has many such modules that can be imported via the import statement.

We can also import statements in a different way "from random import *" which removes the need to put in "random" before calling the function. However, this can decrease readibility as you do not know which module the function comes from.

#+begin_src python :results output :exports both

from random import *

print(randint(1,10))

#+end_src

#+RESULTS:
: 5

Sometimes you want to terminate a program early. There is a function for this in the "sys" module. The "sys.exit" function.


#+begin_src python :results output :exports both

import sys

print("Hello")

sys.exit()

print("Goodbye")

#+end_src

#+RESULTS:
: Hello

As we can see above, the "Goodbye" string was not printed. This is due to the fact that we used the exit function and terminated the program early.


While Python comes with several modules in the standard library, we can also install new modules using the pip program.

#+begin_src sh
pip install pyperclip
#+end_src

#+RESULTS:
| Defaulting   | to                     | user            | installation | because    | normal     | site-packages | is      | not     | writeable |     |            |
| Collecting   | pyperclip              |                 |              |            |            |               |         |         |           |     |            |
| Downloading  | pyperclip-1.8.2.tar.gz | (20             | kB)          |            |            |               |         |         |           |     |            |
| Using        | legacy                 | 'setup.py       | install'     | for        | pyperclip, | since         | package | 'wheel' | is        | not | installed. |
| Installing   | collected              | packages:       | pyperclip    |            |            |               |         |         |           |     |            |
| Running      | setup.py               | install         | for          | pyperclip: | started    |               |         |         |           |     |            |
| Running      | setup.py               | install         | for          | pyperclip: | finished   | with          | status  | 'done'  |           |     |            |
| Successfully | installed              | pyperclip-1.8.2 |              |            |            |               |         |         |           |     |            |


The pyperclip module contains 2 functions, the copy and paste functions which can be used to copy and paste text.

#+begin_src python :results output :exports both

import pyperclip

pyperclip.copy("Hello world!")
print(pyperclip.paste())


#+end_src

#+RESULTS:
: Hello world!

* Writing Your Own Functions

A function is like a mini program inside of a program containing code that runs when the function is called.


#+begin_src python :results output :exports both

def hello():
    print("Howdy!")
    print("Howdy!!!")
    print("Hello there.")

hello()
hello()
hello()

#+end_src

#+RESULTS:
: Howdy!
: Howdy!!!
: Hello there.
: Howdy!
: Howdy!!!
: Hello there.
: Howdy!
: Howdy!!!
: Hello there.

When a function is defined using the "def" statement, the code inside of it is not executed. The code inside the function is only executed when the function is called.

One of the benefits of functions is that it lets you avoid duplicating code. Duplication can be an issue because when you find a bug in the code, you need to make sure you fix it everywhere. With functions, you can just fix the function itself.

Our functions can also contain arguments that our function can use, for example the argument given in a "print" or "len" function.




#+begin_src python :results output :exports both

def hello(name):
    print("Hello " + name)

hello("Alice")
hello("Bob")

#+end_src

#+RESULTS:
: Hello Alice
: Hello Bob

Above when the "hello" function is called, the argument is passed into the function and used as the name variable.


#+begin_src python :results output :exports both

def plusOne(number):
    return number+1


newNumber=plusOne(5)

print(newNumber)

#+end_src

#+RESULTS:
: 6


What does the print function return?

The function returns a special value of a data type "None". It represents a lack of a data type.


#+begin_src python :results output :exports both

spam=print()

print(type(spam))


#+end_src

#+RESULTS:
:
: <class 'NoneType'>

We can take away from this the fact that every function call has some sort of return value, including the print function. When a function does not have a return statement, the return value defaults to "None", as in the print function.


Some functions have keyword arguments. These can be optional arguments, for example the print function adds a new line after you call the function. However, this can be changed as seen below. We can also choose what separates the separating character between the arguments.


#+begin_src python :results output :exports both

print("Hello")
print("World")


print("Hello", end="")
print("World")


print("cat", "dog", "mouse")


print("cat", "dog", "mouse", sep="ABC")

#+end_src

#+RESULTS:
: Hello
: World
: HelloWorld
: cat dog mouse
: catABCdogABCmouse
